
i2c_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800239c  0800239c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023b4  080023b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023b4  080023b4  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023bc  080023bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023bc  080023bc  000123bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023c0  080023c0  000123c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080023d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080023d0  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000776f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001386  00000000  00000000  000277ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  00028b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  00029258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201ec  00000000  00000000  000298e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009816  00000000  00000000  00049ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c43cd  00000000  00000000  000532ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001176b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc8  00000000  00000000  00117708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002384 	.word	0x08002384

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002384 	.word	0x08002384

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  uint8_t TX_Buffer[1]; // DATA to send
  TX_Buffer[0] = 0xAB;
 800050e:	23ab      	movs	r3, #171	; 0xab
 8000510:	713b      	strb	r3, [r7, #4]
  uint16_t test_i2c_address = (0x0045 << 1);
 8000512:	238a      	movs	r3, #138	; 0x8a
 8000514:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef i2c_status = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 f9fb 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f811 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 8000522:	f000 f87d 	bl	8000620 <MX_I2C1_Init>
  MX_GPIO_Init();
 8000526:	f000 f8bd 	bl	80006a4 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i2c_status = HAL_I2C_Master_Transmit(&hi2c1, test_i2c_address, TX_Buffer, 1, 10); //Sending in Blocking mode
 800052a:	1d3a      	adds	r2, r7, #4
 800052c:	88f9      	ldrh	r1, [r7, #6]
 800052e:	230a      	movs	r3, #10
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <main+0x38>)
 8000536:	f000 fe1d 	bl	8001174 <HAL_I2C_Master_Transmit>
 800053a:	4603      	mov	r3, r0
 800053c:	717b      	strb	r3, [r7, #5]
 800053e:	e7f4      	b.n	800052a <main+0x22>
 8000540:	20000028 	.word	0x20000028

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2234      	movs	r2, #52	; 0x34
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f001 ff0e 	bl	8002374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <SystemClock_Config+0xd4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a29      	ldr	r2, [pc, #164]	; (8000618 <SystemClock_Config+0xd4>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b27      	ldr	r3, [pc, #156]	; (8000618 <SystemClock_Config+0xd4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	4b24      	ldr	r3, [pc, #144]	; (800061c <SystemClock_Config+0xd8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000590:	4a22      	ldr	r2, [pc, #136]	; (800061c <SystemClock_Config+0xd8>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <SystemClock_Config+0xd8>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b8:	2310      	movs	r3, #16
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c2:	2304      	movs	r3, #4
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc0c 	bl	8001df0 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005de:	f000 f8bd 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f8c0 	bl	8001784 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800060a:	f000 f8a7 	bl	800075c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000626:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_I2C1_Init+0x74>)
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_I2C1_Init+0x78>)
 800062a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_I2C1_Init+0x74>)
 800062e:	4a1b      	ldr	r2, [pc, #108]	; (800069c <MX_I2C1_Init+0x7c>)
 8000630:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_I2C1_Init+0x74>)
 8000640:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000644:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_I2C1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065e:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_I2C1_Init+0x74>)
 8000660:	f000 fc44 	bl	8000eec <HAL_I2C_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800066a:	f000 f877 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_I2C1_Init+0x80>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <MX_I2C1_Init+0x80>)
 8000678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_I2C1_Init+0x80>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END I2C1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0
 80006a0:	40023800 	.word	0x40023800

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <MX_GPIO_Init+0xb0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a28      	ldr	r2, [pc, #160]	; (8000754 <MX_GPIO_Init+0xb0>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_GPIO_Init+0xb0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80006d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80006da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006dc:	2312      	movs	r3, #18
 80006de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e8:	2304      	movs	r3, #4
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4819      	ldr	r0, [pc, #100]	; (8000758 <MX_GPIO_Init+0xb4>)
 80006f4:	f000 fa66 	bl	8000bc4 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0xb0>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <MX_GPIO_Init+0xb0>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6313      	str	r3, [r2, #48]	; 0x30
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_GPIO_Init+0xb0>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_GPIO_Init+0xb0>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <MX_GPIO_Init+0xb0>)
 800071e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000722:	6313      	str	r3, [r2, #48]	; 0x30
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_GPIO_Init+0xb0>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_GPIO_Init+0xb0>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <MX_GPIO_Init+0xb0>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6313      	str	r3, [r2, #48]	; 0x30
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <MX_GPIO_Init+0xb0>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_MspInit+0x4c>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a6:	2007      	movs	r0, #7
 80007a8:	f000 f9d8 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800

080007b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a19      	ldr	r2, [pc, #100]	; (800083c <HAL_I2C_MspInit+0x84>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d12c      	bne.n	8000834 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <HAL_I2C_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <HAL_I2C_MspInit+0x88>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_I2C_MspInit+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80007f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007fc:	2312      	movs	r3, #18
 80007fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000808:	2304      	movs	r3, #4
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <HAL_I2C_MspInit+0x8c>)
 8000814:	f000 f9d6 	bl	8000bc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_I2C_MspInit+0x88>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_I2C_MspInit+0x88>)
 8000822:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_I2C_MspInit+0x88>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40005400 	.word	0x40005400
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f890 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c6:	490e      	ldr	r1, [pc, #56]	; (8000900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c8:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008dc:	4c0b      	ldr	r4, [pc, #44]	; (800090c <LoopFillZerobss+0x26>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ea:	f7ff ffd7 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ee:	f001 fd1d 	bl	800232c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fe09 	bl	8000508 <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	080023c4 	.word	0x080023c4
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	20000080 	.word	0x20000080

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f90d 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff0e 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f917 	bl	8000baa <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000994:	f000 f8ed 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	2000007c 	.word	0x2000007c

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	2000007c 	.word	0x2000007c

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	; (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	; (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	; 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	; 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff47 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff5c 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffb0 	bl	8000b18 <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	e165      	b.n	8000eac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be0:	2201      	movs	r2, #1
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	f040 8154 	bne.w	8000ea6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 0303 	and.w	r3, r3, #3
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d005      	beq.n	8000c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d130      	bne.n	8000c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	091b      	lsrs	r3, r3, #4
 8000c62:	f003 0201 	and.w	r2, r3, #1
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d017      	beq.n	8000cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2203      	movs	r2, #3
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	689a      	ldr	r2, [r3, #8]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 0303 	and.w	r3, r3, #3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d123      	bne.n	8000d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	08da      	lsrs	r2, r3, #3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3208      	adds	r2, #8
 8000d02:	69b9      	ldr	r1, [r7, #24]
 8000d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0203 	and.w	r2, r3, #3
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80ae 	beq.w	8000ea6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	; (8000ec4 <HAL_GPIO_Init+0x300>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a5c      	ldr	r2, [pc, #368]	; (8000ec4 <HAL_GPIO_Init+0x300>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b5a      	ldr	r3, [pc, #360]	; (8000ec4 <HAL_GPIO_Init+0x300>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d66:	4a58      	ldr	r2, [pc, #352]	; (8000ec8 <HAL_GPIO_Init+0x304>)
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ecc <HAL_GPIO_Init+0x308>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d025      	beq.n	8000dde <HAL_GPIO_Init+0x21a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4e      	ldr	r2, [pc, #312]	; (8000ed0 <HAL_GPIO_Init+0x30c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01f      	beq.n	8000dda <HAL_GPIO_Init+0x216>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4d      	ldr	r2, [pc, #308]	; (8000ed4 <HAL_GPIO_Init+0x310>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x212>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_GPIO_Init+0x314>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x20e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4b      	ldr	r2, [pc, #300]	; (8000edc <HAL_GPIO_Init+0x318>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x20a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4a      	ldr	r2, [pc, #296]	; (8000ee0 <HAL_GPIO_Init+0x31c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x206>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a49      	ldr	r2, [pc, #292]	; (8000ee4 <HAL_GPIO_Init+0x320>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x202>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e00c      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e00a      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dca:	2305      	movs	r3, #5
 8000dcc:	e008      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e006      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e004      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <HAL_GPIO_Init+0x21c>
 8000dde:	2300      	movs	r3, #0
 8000de0:	69fa      	ldr	r2, [r7, #28]
 8000de2:	f002 0203 	and.w	r2, r2, #3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4093      	lsls	r3, r2
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df0:	4935      	ldr	r1, [pc, #212]	; (8000ec8 <HAL_GPIO_Init+0x304>)
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	089b      	lsrs	r3, r3, #2
 8000df6:	3302      	adds	r3, #2
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e22:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e4c:	4a26      	ldr	r2, [pc, #152]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <HAL_GPIO_Init+0x324>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	f67f ae96 	bls.w	8000be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40013800 	.word	0x40013800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40021400 	.word	0x40021400
 8000ee4:	40021800 	.word	0x40021800
 8000ee8:	40013c00 	.word	0x40013c00

08000eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e12b      	b.n	8001156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d106      	bne.n	8000f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fc50 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2224      	movs	r2, #36	; 0x24
 8000f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0201 	bic.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f50:	f000 fd0a 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8000f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4a81      	ldr	r2, [pc, #516]	; (8001160 <HAL_I2C_Init+0x274>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d807      	bhi.n	8000f70 <HAL_I2C_Init+0x84>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4a80      	ldr	r2, [pc, #512]	; (8001164 <HAL_I2C_Init+0x278>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	bf94      	ite	ls
 8000f68:	2301      	movls	r3, #1
 8000f6a:	2300      	movhi	r3, #0
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	e006      	b.n	8000f7e <HAL_I2C_Init+0x92>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4a7d      	ldr	r2, [pc, #500]	; (8001168 <HAL_I2C_Init+0x27c>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	bf94      	ite	ls
 8000f78:	2301      	movls	r3, #1
 8000f7a:	2300      	movhi	r3, #0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e0e7      	b.n	8001156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4a78      	ldr	r2, [pc, #480]	; (800116c <HAL_I2C_Init+0x280>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	0c9b      	lsrs	r3, r3, #18
 8000f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4a6a      	ldr	r2, [pc, #424]	; (8001160 <HAL_I2C_Init+0x274>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d802      	bhi.n	8000fc0 <HAL_I2C_Init+0xd4>
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	e009      	b.n	8000fd4 <HAL_I2C_Init+0xe8>
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	4a69      	ldr	r2, [pc, #420]	; (8001170 <HAL_I2C_Init+0x284>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	099b      	lsrs	r3, r3, #6
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fe6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	495c      	ldr	r1, [pc, #368]	; (8001160 <HAL_I2C_Init+0x274>)
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d819      	bhi.n	8001028 <HAL_I2C_Init+0x13c>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1e59      	subs	r1, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001002:	1c59      	adds	r1, r3, #1
 8001004:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001008:	400b      	ands	r3, r1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00a      	beq.n	8001024 <HAL_I2C_Init+0x138>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1e59      	subs	r1, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fbb1 f3f3 	udiv	r3, r1, r3
 800101c:	3301      	adds	r3, #1
 800101e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001022:	e051      	b.n	80010c8 <HAL_I2C_Init+0x1dc>
 8001024:	2304      	movs	r3, #4
 8001026:	e04f      	b.n	80010c8 <HAL_I2C_Init+0x1dc>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d111      	bne.n	8001054 <HAL_I2C_Init+0x168>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1e58      	subs	r0, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6859      	ldr	r1, [r3, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	440b      	add	r3, r1
 800103e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001042:	3301      	adds	r3, #1
 8001044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001048:	2b00      	cmp	r3, #0
 800104a:	bf0c      	ite	eq
 800104c:	2301      	moveq	r3, #1
 800104e:	2300      	movne	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	e012      	b.n	800107a <HAL_I2C_Init+0x18e>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1e58      	subs	r0, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	0099      	lsls	r1, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	fbb0 f3f3 	udiv	r3, r0, r3
 800106a:	3301      	adds	r3, #1
 800106c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001070:	2b00      	cmp	r3, #0
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_I2C_Init+0x196>
 800107e:	2301      	movs	r3, #1
 8001080:	e022      	b.n	80010c8 <HAL_I2C_Init+0x1dc>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10e      	bne.n	80010a8 <HAL_I2C_Init+0x1bc>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1e58      	subs	r0, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6859      	ldr	r1, [r3, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	440b      	add	r3, r1
 8001098:	fbb0 f3f3 	udiv	r3, r0, r3
 800109c:	3301      	adds	r3, #1
 800109e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a6:	e00f      	b.n	80010c8 <HAL_I2C_Init+0x1dc>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1e58      	subs	r0, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6859      	ldr	r1, [r3, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	0099      	lsls	r1, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80010be:	3301      	adds	r3, #1
 80010c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	6809      	ldr	r1, [r1, #0]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69da      	ldr	r2, [r3, #28]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	6911      	ldr	r1, [r2, #16]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68d2      	ldr	r2, [r2, #12]
 8001102:	4311      	orrs	r1, r2
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	430b      	orrs	r3, r1
 800110a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2220      	movs	r2, #32
 8001142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	000186a0 	.word	0x000186a0
 8001164:	001e847f 	.word	0x001e847f
 8001168:	003d08ff 	.word	0x003d08ff
 800116c:	431bde83 	.word	0x431bde83
 8001170:	10624dd3 	.word	0x10624dd3

08001174 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af02      	add	r7, sp, #8
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	461a      	mov	r2, r3
 8001180:	460b      	mov	r3, r1
 8001182:	817b      	strh	r3, [r7, #10]
 8001184:	4613      	mov	r3, r2
 8001186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff fc2a 	bl	80009e0 <HAL_GetTick>
 800118c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b20      	cmp	r3, #32
 8001198:	f040 80e0 	bne.w	800135c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2319      	movs	r3, #25
 80011a2:	2201      	movs	r2, #1
 80011a4:	4970      	ldr	r1, [pc, #448]	; (8001368 <HAL_I2C_Master_Transmit+0x1f4>)
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f000 f964 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80011b2:	2302      	movs	r3, #2
 80011b4:	e0d3      	b.n	800135e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_I2C_Master_Transmit+0x50>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e0cc      	b.n	800135e <HAL_I2C_Master_Transmit+0x1ea>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d007      	beq.n	80011ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0201 	orr.w	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2221      	movs	r2, #33	; 0x21
 80011fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2210      	movs	r2, #16
 8001206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	893a      	ldrh	r2, [r7, #8]
 800121a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001220:	b29a      	uxth	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <HAL_I2C_Master_Transmit+0x1f8>)
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800122c:	8979      	ldrh	r1, [r7, #10]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	6a3a      	ldr	r2, [r7, #32]
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 f89c 	bl	8001370 <I2C_MasterRequestWrite>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e08d      	b.n	800135e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001258:	e066      	b.n	8001328 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	6a39      	ldr	r1, [r7, #32]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f000 f9de 	bl	8001620 <I2C_WaitOnTXEFlagUntilTimeout>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00d      	beq.n	8001286 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	2b04      	cmp	r3, #4
 8001270:	d107      	bne.n	8001282 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e06b      	b.n	800135e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ae:	3b01      	subs	r3, #1
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d11b      	bne.n	80012fc <HAL_I2C_Master_Transmit+0x188>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d017      	beq.n	80012fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3b01      	subs	r3, #1
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	6a39      	ldr	r1, [r7, #32]
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 f9ce 	bl	80016a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00d      	beq.n	8001328 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	2b04      	cmp	r3, #4
 8001312:	d107      	bne.n	8001324 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001322:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e01a      	b.n	800135e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132c:	2b00      	cmp	r3, #0
 800132e:	d194      	bne.n	800125a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800133e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2220      	movs	r2, #32
 8001344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	e000      	b.n	800135e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800135c:	2302      	movs	r3, #2
  }
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	00100002 	.word	0x00100002
 800136c:	ffff0000 	.word	0xffff0000

08001370 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af02      	add	r7, sp, #8
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	460b      	mov	r3, r1
 800137e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b08      	cmp	r3, #8
 800138a:	d006      	beq.n	800139a <I2C_MasterRequestWrite+0x2a>
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d003      	beq.n	800139a <I2C_MasterRequestWrite+0x2a>
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001398:	d108      	bne.n	80013ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	e00b      	b.n	80013c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	2b12      	cmp	r3, #18
 80013b2:	d107      	bne.n	80013c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 f84f 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00d      	beq.n	80013f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013ea:	d103      	bne.n	80013f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e035      	b.n	8001464 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001400:	d108      	bne.n	8001414 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001402:	897b      	ldrh	r3, [r7, #10]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	e01b      	b.n	800144c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001414:	897b      	ldrh	r3, [r7, #10]
 8001416:	11db      	asrs	r3, r3, #7
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0306 	and.w	r3, r3, #6
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f063 030f 	orn	r3, r3, #15
 8001424:	b2da      	uxtb	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	490e      	ldr	r1, [pc, #56]	; (800146c <I2C_MasterRequestWrite+0xfc>)
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 f875 	bl	8001522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e010      	b.n	8001464 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <I2C_MasterRequestWrite+0x100>)
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f865 	bl	8001522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	00010008 	.word	0x00010008
 8001470:	00010002 	.word	0x00010002

08001474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001484:	e025      	b.n	80014d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800148c:	d021      	beq.n	80014d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800148e:	f7ff faa7 	bl	80009e0 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d302      	bcc.n	80014a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d116      	bne.n	80014d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2220      	movs	r2, #32
 80014ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f043 0220 	orr.w	r2, r3, #32
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e023      	b.n	800151a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	0c1b      	lsrs	r3, r3, #16
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d10d      	bne.n	80014f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4013      	ands	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	bf0c      	ite	eq
 80014ee:	2301      	moveq	r3, #1
 80014f0:	2300      	movne	r3, #0
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	e00c      	b.n	8001512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4013      	ands	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	bf0c      	ite	eq
 800150a:	2301      	moveq	r3, #1
 800150c:	2300      	movne	r3, #0
 800150e:	b2db      	uxtb	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	429a      	cmp	r2, r3
 8001516:	d0b6      	beq.n	8001486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001530:	e051      	b.n	80015d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001540:	d123      	bne.n	800158a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800155a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2220      	movs	r2, #32
 8001566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f043 0204 	orr.w	r2, r3, #4
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e046      	b.n	8001618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001590:	d021      	beq.n	80015d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001592:	f7ff fa25 	bl	80009e0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d302      	bcc.n	80015a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d116      	bne.n	80015d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2200      	movs	r2, #0
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f043 0220 	orr.w	r2, r3, #32
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e020      	b.n	8001618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	0c1b      	lsrs	r3, r3, #16
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d10c      	bne.n	80015fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	43da      	mvns	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4013      	ands	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	bf14      	ite	ne
 80015f2:	2301      	movne	r3, #1
 80015f4:	2300      	moveq	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	e00b      	b.n	8001612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	43da      	mvns	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	4013      	ands	r3, r2
 8001606:	b29b      	uxth	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d18d      	bne.n	8001532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800162c:	e02d      	b.n	800168a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f000 f878 	bl	8001724 <I2C_IsAcknowledgeFailed>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e02d      	b.n	800169a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001644:	d021      	beq.n	800168a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001646:	f7ff f9cb 	bl	80009e0 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	429a      	cmp	r2, r3
 8001654:	d302      	bcc.n	800165c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d116      	bne.n	800168a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2200      	movs	r2, #0
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e007      	b.n	800169a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001694:	2b80      	cmp	r3, #128	; 0x80
 8001696:	d1ca      	bne.n	800162e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80016ae:	e02d      	b.n	800170c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f837 	bl	8001724 <I2C_IsAcknowledgeFailed>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e02d      	b.n	800171c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016c6:	d021      	beq.n	800170c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c8:	f7ff f98a 	bl	80009e0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d302      	bcc.n	80016de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d116      	bne.n	800170c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2220      	movs	r2, #32
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f043 0220 	orr.w	r2, r3, #32
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e007      	b.n	800171c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	2b04      	cmp	r3, #4
 8001718:	d1ca      	bne.n	80016b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173a:	d11b      	bne.n	8001774 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001744:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f043 0204 	orr.w	r2, r3, #4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0cc      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d90c      	bls.n	80017c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b63      	ldr	r3, [pc, #396]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0b8      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d8:	4b59      	ldr	r3, [pc, #356]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	4a58      	ldr	r2, [pc, #352]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f0:	4b53      	ldr	r3, [pc, #332]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a52      	ldr	r2, [pc, #328]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fc:	4b50      	ldr	r3, [pc, #320]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	494d      	ldr	r1, [pc, #308]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d044      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	4b47      	ldr	r3, [pc, #284]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d119      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d003      	beq.n	8001842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	2b03      	cmp	r3, #3
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e06f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e067      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b37      	ldr	r3, [pc, #220]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4934      	ldr	r1, [pc, #208]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f8b4 	bl	80009e0 <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff f8b0 	bl	80009e0 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e04f      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d20c      	bcs.n	80018cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b22      	ldr	r3, [pc, #136]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e032      	b.n	8001932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4916      	ldr	r1, [pc, #88]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d009      	beq.n	800190a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	490e      	ldr	r1, [pc, #56]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800190a:	f000 f841 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 800190e:	4602      	mov	r2, r0
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	091b      	lsrs	r3, r3, #4
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	490a      	ldr	r1, [pc, #40]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800191c:	5ccb      	ldrb	r3, [r1, r3]
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff f814 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00
 8001940:	40023800 	.word	0x40023800
 8001944:	0800239c 	.word	0x0800239c
 8001948:	20000000 	.word	0x20000000
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_GetHCLKFreq+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000

08001968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800196c:	f7ff fff0 	bl	8001950 <HAL_RCC_GetHCLKFreq>
 8001970:	4602      	mov	r2, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0a9b      	lsrs	r3, r3, #10
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4903      	ldr	r1, [pc, #12]	; (800198c <HAL_RCC_GetPCLK1Freq+0x24>)
 800197e:	5ccb      	ldrb	r3, [r1, r3]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	080023ac 	.word	0x080023ac

08001990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001994:	b0ae      	sub	sp, #184	; 0xb8
 8001996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b6:	4bcb      	ldr	r3, [pc, #812]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	f200 8206 	bhi.w	8001dd0 <HAL_RCC_GetSysClockFreq+0x440>
 80019c4:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	08001a01 	.word	0x08001a01
 80019d0:	08001dd1 	.word	0x08001dd1
 80019d4:	08001dd1 	.word	0x08001dd1
 80019d8:	08001dd1 	.word	0x08001dd1
 80019dc:	08001a09 	.word	0x08001a09
 80019e0:	08001dd1 	.word	0x08001dd1
 80019e4:	08001dd1 	.word	0x08001dd1
 80019e8:	08001dd1 	.word	0x08001dd1
 80019ec:	08001a11 	.word	0x08001a11
 80019f0:	08001dd1 	.word	0x08001dd1
 80019f4:	08001dd1 	.word	0x08001dd1
 80019f8:	08001dd1 	.word	0x08001dd1
 80019fc:	08001c01 	.word	0x08001c01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4bb9      	ldr	r3, [pc, #740]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a06:	e1e7      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a08:	4bb8      	ldr	r3, [pc, #736]	; (8001cec <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a0e:	e1e3      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a10:	4bb4      	ldr	r3, [pc, #720]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a1c:	4bb1      	ldr	r3, [pc, #708]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d071      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a28:	4bae      	ldr	r3, [pc, #696]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a34:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a4e:	4622      	mov	r2, r4
 8001a50:	462b      	mov	r3, r5
 8001a52:	f04f 0000 	mov.w	r0, #0
 8001a56:	f04f 0100 	mov.w	r1, #0
 8001a5a:	0159      	lsls	r1, r3, #5
 8001a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a60:	0150      	lsls	r0, r2, #5
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4621      	mov	r1, r4
 8001a68:	1a51      	subs	r1, r2, r1
 8001a6a:	6439      	str	r1, [r7, #64]	; 0x40
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a72:	647b      	str	r3, [r7, #68]	; 0x44
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a80:	4649      	mov	r1, r9
 8001a82:	018b      	lsls	r3, r1, #6
 8001a84:	4641      	mov	r1, r8
 8001a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	018a      	lsls	r2, r1, #6
 8001a8e:	4641      	mov	r1, r8
 8001a90:	1a51      	subs	r1, r2, r1
 8001a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a94:	4649      	mov	r1, r9
 8001a96:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	00cb      	lsls	r3, r1, #3
 8001aac:	4641      	mov	r1, r8
 8001aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ab2:	4641      	mov	r1, r8
 8001ab4:	00ca      	lsls	r2, r1, #3
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	4622      	mov	r2, r4
 8001abe:	189b      	adds	r3, r3, r2
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac2:	462b      	mov	r3, r5
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	eb42 0303 	adc.w	r3, r2, r3
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ad8:	4629      	mov	r1, r5
 8001ada:	024b      	lsls	r3, r1, #9
 8001adc:	4621      	mov	r1, r4
 8001ade:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	024a      	lsls	r2, r1, #9
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001af4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001af8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001afc:	f7fe fb82 	bl	8000204 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b0a:	e067      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b75      	ldr	r3, [pc, #468]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b18:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b24:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b26:	2300      	movs	r3, #0
 8001b28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b2e:	4622      	mov	r2, r4
 8001b30:	462b      	mov	r3, r5
 8001b32:	f04f 0000 	mov.w	r0, #0
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	0159      	lsls	r1, r3, #5
 8001b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b40:	0150      	lsls	r0, r2, #5
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4621      	mov	r1, r4
 8001b48:	1a51      	subs	r1, r2, r1
 8001b4a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b60:	4649      	mov	r1, r9
 8001b62:	018b      	lsls	r3, r1, #6
 8001b64:	4641      	mov	r1, r8
 8001b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b6a:	4641      	mov	r1, r8
 8001b6c:	018a      	lsls	r2, r1, #6
 8001b6e:	4641      	mov	r1, r8
 8001b70:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b74:	4649      	mov	r1, r9
 8001b76:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b8e:	4692      	mov	sl, r2
 8001b90:	469b      	mov	fp, r3
 8001b92:	4623      	mov	r3, r4
 8001b94:	eb1a 0303 	adds.w	r3, sl, r3
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	eb4b 0303 	adc.w	r3, fp, r3
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bae:	4629      	mov	r1, r5
 8001bb0:	028b      	lsls	r3, r1, #10
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bb8:	4621      	mov	r1, r4
 8001bba:	028a      	lsls	r2, r1, #10
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8001bc8:	677a      	str	r2, [r7, #116]	; 0x74
 8001bca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bce:	f7fe fb19 	bl	8000204 <__aeabi_uldivmod>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	3301      	adds	r3, #1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bfe:	e0eb      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c00:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d06b      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c18:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	2200      	movs	r2, #0
 8001c20:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c34:	4622      	mov	r2, r4
 8001c36:	462b      	mov	r3, r5
 8001c38:	f04f 0000 	mov.w	r0, #0
 8001c3c:	f04f 0100 	mov.w	r1, #0
 8001c40:	0159      	lsls	r1, r3, #5
 8001c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c46:	0150      	lsls	r0, r2, #5
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	1a51      	subs	r1, r2, r1
 8001c50:	61b9      	str	r1, [r7, #24]
 8001c52:	4629      	mov	r1, r5
 8001c54:	eb63 0301 	sbc.w	r3, r3, r1
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c66:	4659      	mov	r1, fp
 8001c68:	018b      	lsls	r3, r1, #6
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c70:	4651      	mov	r1, sl
 8001c72:	018a      	lsls	r2, r1, #6
 8001c74:	4651      	mov	r1, sl
 8001c76:	ebb2 0801 	subs.w	r8, r2, r1
 8001c7a:	4659      	mov	r1, fp
 8001c7c:	eb63 0901 	sbc.w	r9, r3, r1
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c94:	4690      	mov	r8, r2
 8001c96:	4699      	mov	r9, r3
 8001c98:	4623      	mov	r3, r4
 8001c9a:	eb18 0303 	adds.w	r3, r8, r3
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	462b      	mov	r3, r5
 8001ca2:	eb49 0303 	adc.w	r3, r9, r3
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	024b      	lsls	r3, r1, #9
 8001cb8:	4621      	mov	r1, r4
 8001cba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	024a      	lsls	r2, r1, #9
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cca:	2200      	movs	r2, #0
 8001ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cce:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cd4:	f7fe fa96 	bl	8000204 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ce2:	e065      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x420>
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d00:	653b      	str	r3, [r7, #80]	; 0x50
 8001d02:	2300      	movs	r3, #0
 8001d04:	657b      	str	r3, [r7, #84]	; 0x54
 8001d06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d0a:	4642      	mov	r2, r8
 8001d0c:	464b      	mov	r3, r9
 8001d0e:	f04f 0000 	mov.w	r0, #0
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	0159      	lsls	r1, r3, #5
 8001d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1c:	0150      	lsls	r0, r2, #5
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4641      	mov	r1, r8
 8001d24:	1a51      	subs	r1, r2, r1
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	4649      	mov	r1, r9
 8001d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d3c:	4659      	mov	r1, fp
 8001d3e:	018b      	lsls	r3, r1, #6
 8001d40:	4651      	mov	r1, sl
 8001d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d46:	4651      	mov	r1, sl
 8001d48:	018a      	lsls	r2, r1, #6
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	1a54      	subs	r4, r2, r1
 8001d4e:	4659      	mov	r1, fp
 8001d50:	eb63 0501 	sbc.w	r5, r3, r1
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	00eb      	lsls	r3, r5, #3
 8001d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d62:	00e2      	lsls	r2, r4, #3
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	4643      	mov	r3, r8
 8001d6a:	18e3      	adds	r3, r4, r3
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	464b      	mov	r3, r9
 8001d70:	eb45 0303 	adc.w	r3, r5, r3
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d82:	4629      	mov	r1, r5
 8001d84:	028b      	lsls	r3, r1, #10
 8001d86:	4621      	mov	r1, r4
 8001d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	028a      	lsls	r2, r1, #10
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d98:	2200      	movs	r2, #0
 8001d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d9c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001da2:	f7fe fa2f 	bl	8000204 <__aeabi_uldivmod>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4613      	mov	r3, r2
 8001dac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	0f1b      	lsrs	r3, r3, #28
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dce:	e003      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	37b8      	adds	r7, #184	; 0xb8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	00f42400 	.word	0x00f42400

08001df0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e28d      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8083 	beq.w	8001f16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e10:	4b94      	ldr	r3, [pc, #592]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d019      	beq.n	8001e50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e1c:	4b91      	ldr	r3, [pc, #580]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e28:	4b8e      	ldr	r3, [pc, #568]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e34:	d00c      	beq.n	8001e50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e36:	4b8b      	ldr	r3, [pc, #556]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d112      	bne.n	8001e68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e42:	4b88      	ldr	r3, [pc, #544]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b84      	ldr	r3, [pc, #528]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x124>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d157      	bne.n	8001f14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e25a      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x90>
 8001e72:	4b7c      	ldr	r3, [pc, #496]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7b      	ldr	r2, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xcc>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xb4>
 8001e8a:	4b76      	ldr	r3, [pc, #472]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a75      	ldr	r2, [pc, #468]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b73      	ldr	r3, [pc, #460]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a72      	ldr	r2, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xcc>
 8001ea4:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b6c      	ldr	r3, [pc, #432]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6b      	ldr	r2, [pc, #428]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fd8c 	bl	80009e0 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe fd88 	bl	80009e0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e21f      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b61      	ldr	r3, [pc, #388]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xdc>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe fd78 	bl	80009e0 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fd74 	bl	80009e0 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e20b      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	4b57      	ldr	r3, [pc, #348]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x104>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d06f      	beq.n	8002002 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f22:	4b50      	ldr	r3, [pc, #320]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d017      	beq.n	8001f5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f2e:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d105      	bne.n	8001f46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f3a:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f52:	4b44      	ldr	r3, [pc, #272]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x186>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1d3      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b3b      	ldr	r3, [pc, #236]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4937      	ldr	r1, [pc, #220]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_RCC_OscConfig+0x278>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fd21 	bl	80009e0 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7fe fd1d 	bl	80009e0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1b4      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b28      	ldr	r3, [pc, #160]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4925      	ldr	r1, [pc, #148]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCC_OscConfig+0x278>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fd00 	bl	80009e0 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fcfc 	bl	80009e0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e193      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d036      	beq.n	800207c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_RCC_OscConfig+0x27c>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7fe fce0 	bl	80009e0 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002024:	f7fe fcdc 	bl	80009e0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e173      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x274>)
 8002038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x234>
 8002042:	e01b      	b.n	800207c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_OscConfig+0x27c>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204a:	f7fe fcc9 	bl	80009e0 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	e00e      	b.n	8002070 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002052:	f7fe fcc5 	bl	80009e0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d907      	bls.n	8002070 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e15c      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
 8002064:	40023800 	.word	0x40023800
 8002068:	42470000 	.word	0x42470000
 800206c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b8a      	ldr	r3, [pc, #552]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ea      	bne.n	8002052 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8097 	beq.w	80021b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b83      	ldr	r3, [pc, #524]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a7e      	ldr	r2, [pc, #504]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b7c      	ldr	r3, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b79      	ldr	r3, [pc, #484]	; (80022a0 <HAL_RCC_OscConfig+0x4b0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCC_OscConfig+0x4b0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0x4b0>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fc85 	bl	80009e0 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7fe fc81 	bl	80009e0 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e118      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <HAL_RCC_OscConfig+0x4b0>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x31e>
 8002100:	4b66      	ldr	r3, [pc, #408]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a65      	ldr	r2, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	e01c      	b.n	8002148 <HAL_RCC_OscConfig+0x358>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x340>
 8002116:	4b61      	ldr	r3, [pc, #388]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	4a60      	ldr	r2, [pc, #384]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
 8002122:	4b5e      	ldr	r3, [pc, #376]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a5d      	ldr	r2, [pc, #372]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x358>
 8002130:	4b5a      	ldr	r3, [pc, #360]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a59      	ldr	r2, [pc, #356]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	4b57      	ldr	r3, [pc, #348]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a56      	ldr	r2, [pc, #344]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002142:	f023 0304 	bic.w	r3, r3, #4
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d015      	beq.n	800217c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7fe fc46 	bl	80009e0 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7fe fc42 	bl	80009e0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0d7      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	4b4b      	ldr	r3, [pc, #300]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0ee      	beq.n	8002158 <HAL_RCC_OscConfig+0x368>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7fe fc30 	bl	80009e0 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fc2c 	bl	80009e0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0c1      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ee      	bne.n	8002184 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ac:	4b3b      	ldr	r3, [pc, #236]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	4a3a      	ldr	r2, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80ad 	beq.w	800231c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d060      	beq.n	8002290 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d145      	bne.n	8002262 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_RCC_OscConfig+0x4b4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fc00 	bl	80009e0 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fbfc 	bl	80009e0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e093      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	3b01      	subs	r3, #1
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	071b      	lsls	r3, r3, #28
 800222e:	491b      	ldr	r1, [pc, #108]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <HAL_RCC_OscConfig+0x4b4>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe fbd1 	bl	80009e0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe fbcd 	bl	80009e0 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e064      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x452>
 8002260:	e05c      	b.n	800231c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_RCC_OscConfig+0x4b4>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fbba 	bl	80009e0 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002270:	f7fe fbb6 	bl	80009e0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04d      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_RCC_OscConfig+0x4ac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x480>
 800228e:	e045      	b.n	800231c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e040      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000
 80022a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <HAL_RCC_OscConfig+0x538>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d030      	beq.n	8002318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d129      	bne.n	8002318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d122      	bne.n	8002318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022d8:	4013      	ands	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d119      	bne.n	8002318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	085b      	lsrs	r3, r3, #1
 80022f0:	3b01      	subs	r3, #1
 80022f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10f      	bne.n	8002318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002304:	429a      	cmp	r2, r3
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800

0800232c <__libc_init_array>:
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	4d0d      	ldr	r5, [pc, #52]	; (8002364 <__libc_init_array+0x38>)
 8002330:	4c0d      	ldr	r4, [pc, #52]	; (8002368 <__libc_init_array+0x3c>)
 8002332:	1b64      	subs	r4, r4, r5
 8002334:	10a4      	asrs	r4, r4, #2
 8002336:	2600      	movs	r6, #0
 8002338:	42a6      	cmp	r6, r4
 800233a:	d109      	bne.n	8002350 <__libc_init_array+0x24>
 800233c:	4d0b      	ldr	r5, [pc, #44]	; (800236c <__libc_init_array+0x40>)
 800233e:	4c0c      	ldr	r4, [pc, #48]	; (8002370 <__libc_init_array+0x44>)
 8002340:	f000 f820 	bl	8002384 <_init>
 8002344:	1b64      	subs	r4, r4, r5
 8002346:	10a4      	asrs	r4, r4, #2
 8002348:	2600      	movs	r6, #0
 800234a:	42a6      	cmp	r6, r4
 800234c:	d105      	bne.n	800235a <__libc_init_array+0x2e>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	f855 3b04 	ldr.w	r3, [r5], #4
 8002354:	4798      	blx	r3
 8002356:	3601      	adds	r6, #1
 8002358:	e7ee      	b.n	8002338 <__libc_init_array+0xc>
 800235a:	f855 3b04 	ldr.w	r3, [r5], #4
 800235e:	4798      	blx	r3
 8002360:	3601      	adds	r6, #1
 8002362:	e7f2      	b.n	800234a <__libc_init_array+0x1e>
 8002364:	080023bc 	.word	0x080023bc
 8002368:	080023bc 	.word	0x080023bc
 800236c:	080023bc 	.word	0x080023bc
 8002370:	080023c0 	.word	0x080023c0

08002374 <memset>:
 8002374:	4402      	add	r2, r0
 8002376:	4603      	mov	r3, r0
 8002378:	4293      	cmp	r3, r2
 800237a:	d100      	bne.n	800237e <memset+0xa>
 800237c:	4770      	bx	lr
 800237e:	f803 1b01 	strb.w	r1, [r3], #1
 8002382:	e7f9      	b.n	8002378 <memset+0x4>

08002384 <_init>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	bf00      	nop
 8002388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	469e      	mov	lr, r3
 800238e:	4770      	bx	lr

08002390 <_fini>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	bf00      	nop
 8002394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002396:	bc08      	pop	{r3}
 8002398:	469e      	mov	lr, r3
 800239a:	4770      	bx	lr
